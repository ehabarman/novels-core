extend type Query {
    book(bookId: ID!): Book
    books(filter: BooksFilter, pagination: NumericPaginationInput!): [Book!]!
}

extend type Mutation {
    createBook(input: CreateBookInput!): Book!
    updateBook(input: UpdateBookInput!): Book!
    createChapter(input: CreateChapterInput!): Chapter!
    deleteChapter(bookId: ID!, chapterId: ID!): Chapter!
    updateChapter(input: UpdateChapterInput!): Chapter!
}

type Book {
    id: String!
    title: String!
    description: String!
    coverPhoto: String
    owner: User!
    status: BookStatus!
    chapter(id: ID!): Chapter
    chapters: [Chapter!]!
    createdAt: String!
    updatedAt:String!
}

type Chapter {
    id: ID!
    title: String!
    draft: Boolean!
    content: String!
    authorNotes: String
    createdAt: String!
    updateAt: String!
}

enum BookStatus {
    COMPLETED,
    DROPPED,
    HIATUS,
    IN_PROGRESS
}

input CreateBookInput {
    title: String!
    description: String!
    coverPhoto: String
}

input UpdateBookInput {
    bookId: ID!
    status: BookStatus!
    title: String!
    description: String!
    coverPhoto: String
}

input BooksFilter {
    status: BookStatus
    ownerId: String
}

input CreateChapterInput {
    bookId: String!
    title: String!
    content: String!
    authorNotes: String
    draft: Boolean! = true
}

input UpdateChapterInput {
    bookId: ID!
    chapterId: ID!
    title: String!
    content: String!
    authorNotes: String
    draft: Boolean! = true
}